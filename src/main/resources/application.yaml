debug: false
  # logback의 debug 모드를 비활성화

management.endpoints.web.exposure.include: "*"
  # spring actuator의 엔드포인트 중 감춰져있는 것을 모두 활성화

logging:
  level:
#    io.mykim.projectboard: debug
#    org.springframework.web.servlet: debug
    org.hibernate.SQL: debug
    org.hibernate.type: trace
      # org.hibernate.SQL  : Logger를 통해 하이버네이트 실행 SQL을 남김
      # org.hibernate.type : SQL 실행 파라미터를 로그로 남긴다.

spring:
  profiles:
    active: local
    # include: oauth

  # vault - local
  application.name: project-board-local # vault ui에서 생성한 secret 명
  cloud:
    vault:
      uri: http://localhost:8200
      scheme: http
      authentication: TOKEN # 인증방식 설정(token 방식 사용, 상대적으로 보안에 약함)
      token: root
  config.import: vault://

  security:
    oauth2:
      client:
        registration:
          #google
          google:
            client-id: ${OAUTH2_GOOGLE_CLIENT_ID}
            client-secret: ${OAUTH2_GOOGLE_CLIENT_SECRET}
            scope:
              - email
              - profile

          #naver
          naver:
            client-id: ${OAUTH2_NAVER_CLIENT_ID}
            client-secret: ${OAUTH2_NAVER_CLIENT_SECRET}
            redirect-uri: "{baseUrl}/login/oauth2/code/naver"
            authorization-grant-type: authorization_code
            client-name: Naver
            scope:
              - name
              - email
              - nickname

          # kakao
          kakao:
            client-id: ${OAUTH2_KAKAO_CLIENT_ID}     # 발급받은 REST API 키
            client-secret: ${OAUTH2_KAKAO_CLIENT_SECRET} # 발급받은 Client Secret
            authorization-grant-type: authorization_code
            redirect-uri: "{baseUrl}/login/oauth2/code/kakao" # ""인 이유 - {} 인식을 위해
            client-authentication-method: POST  # 인증 API요청 시 http method
            client-name: Kakao
            scope:
              - account_email
              - profile_nickname

        provider:
          # naver
          naver:
            authorization-uri: https://nid.naver.com/oauth2.0/authorize
            token-uri: https://nid.naver.com/oauth2.0/token
            user-info-uri: https://openapi.naver.com/v1/nid/me
            user-name-attribute: response
              # 네이버 서버로부터 넘어온 인증정보 식별자
            # 기준이 되는 user_name의 이름을 네이버에서는 response로 해야됨
            # 이유는 네이버의 회원 조회 시 반환되는 json 형태때문

          # kakao
          kakao:
            authorization-uri: https://kauth.kakao.com/oauth/authorize
            token-uri: https://kauth.kakao.com/oauth/token
            user-info-uri: https://kapi.kakao.com/v2/user/me
            user-name-attribute: id #카카오 서버로부터 넘어온 인증정보 식별자



  #DB Connection
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: ${LOCAL_DB_URL}
    username: ${LOCAL_DB_USERNAME}
    password: ${LOCAL_DB_PASSWORD}

  # JPA 관련
  jpa:
    defer-datasource-initialization: true
      #초기 테스트 용 데이터 입력을 위한 data.sql 작동 활성화

    open-in-view: false
      # OSIV 설정 : Open Session In View(하이버네이트), Open EntityManager In View(JPA)
        # default : true
        # [true]
        # - 트랜잭션 시작처럼 최초 데이터베이스 커넥션 시작 시점부터 API 응답이 끝날 때 까지 영속성 컨텍스트와 데이터베이스 커넥션을 유지
        # - 그렇기때문에 View Template이나 API 컨트롤러에서 지연 로딩이 가능
        # - 지연 로딩은 영속성 컨텍스트가 살아있어야 가능하고, 영속성 컨텍스트는 기본적으로 데이터베이스 커넥션을 유지한다. → 이것 자체가 큰 장점이다.
        # - 이 전략은 너무 오랜시간동안 데이터베이스 커넥션 리소스를 사용하기 때문에, 실시간 트래픽이 중요한 애플리케이션에서는 커넥션이 모자랄 수 있다. → 이것은 결국 장애로 이어진다
        # - 컨트롤러에서 외부 API를 호출하면 외부 API 대기 시간 만큼 커넥션 리소스를 반환하지 못하고, 유지해야 한다.
        # [false]
        # - 트랜잭션을 종료할 때 영속성 컨텍스트를 닫고, 데이터베이스 커넥션도 반환
        # - 모든 지연로딩을 트랜잭션 안에서 처리
        # - 지연로딩 코드를 트랜잭션 안으로 넣어야 하는 단점
        # - 트랜잭션이 끝나기 전에 지연 로딩을 강제로 호출해 두어야 함?

    hibernate:
      ddl-auto: create
        # ddl-auto: 'option'
        # none : 아무것도 하지 않는다.
        # create : 기존의 테이블이 있다면, 지우고 새로 만듬.
        # create-drop : 테이블을 새로 만들고, 앱이 꺼지기 전에 지운다.
      # update : Entity에서 추가된 필드를 테이블에 반영한다.(테이블 수정)
      # validate : Entity와 테이블의 정합성이 맞는지 검증한다.(안맞으면 오류를 발생 : Application 종료)

    properties:
      hibernate:
        format_sql: true
        default_batch_fetch_size: 100
        # hibernate.format_sql: true
          # sql query formatting
        # hibernate.default_batch_fetch_size: 100
          # 설정, in (, , , ,) 의 개수, 100 ~ 1000
        # hibernate.use_sql_comments: true
          #querydsl - jpql parameter
        metadata_builder_contributor: io.mykim.projectboard.global.config.mysql.CustomMysqlDialect

  sql.init.mode: always
    #app실행 시 data.sql 실행

#jasypt:
#  encryptor:
#    bean: jasyptStringEncryptor
#    algorithm: PBEWithMD5AndDES
#    pool-size: 2
#    key-obtention-iterations: 1000
#    password: ${JASYPT_SECRET_KEY}

---
spring:
  config:
    activate:
      on-profile: prod

  datasource:
    url: ENC(AUfDE+ycjKkyls5vXQy2/tWMkk3YTx5T2Ju7sQAUpWgiqknFtpJ0DQZCOMJUwINPaFgK29KB5AsGKugwg8/d/9I+yKrNXGgKmvJc3ZgL5ttdm/vxS2b6aiX3wwn5xW6aLc45mVyQKkSRE2ZEc+QmQUvnYZ1GAEWEKkbcSqBycxRcrMY8TIGkZ4oAaKf75h7+13lFQmaX5/erFoBP/DbDfRtbP9/uNWRXWoPVDrociR8=)
    username: ENC(QBB/27zo3GmIf9cgWgysvw==)
    password: ENC(m/f4lYdDAfuW9gaTSyxIltrvrKb6nKrp)
    driver-class-name: com.mysql.cj.jdbc.Driver

  jpa:
    defer-datasource-initialization: false
    hibernate:
      ddl-auto: none

  sql.init.mode: never

---
server:
  port: 8081

spring:
  config:
    activate:
      on-profile: prod1

  datasource:
    url: ENC(AUfDE+ycjKkyls5vXQy2/tWMkk3YTx5T2Ju7sQAUpWgiqknFtpJ0DQZCOMJUwINPaFgK29KB5AsGKugwg8/d/9I+yKrNXGgKmvJc3ZgL5ttdm/vxS2b6aiX3wwn5xW6aLc45mVyQKkSRE2ZEc+QmQUvnYZ1GAEWEKkbcSqBycxRcrMY8TIGkZ4oAaKf75h7+13lFQmaX5/erFoBP/DbDfRtbP9/uNWRXWoPVDrociR8=)
    username: ENC(QBB/27zo3GmIf9cgWgysvw==)
    password: ENC(m/f4lYdDAfuW9gaTSyxIltrvrKb6nKrp)
    driver-class-name: com.mysql.cj.jdbc.Driver

  jpa:
    defer-datasource-initialization: false
    hibernate:
      ddl-auto: none

  sql.init.mode: never

---
server:
  port: 8082

spring:
  config:
    activate:
      on-profile: prod2

  datasource:
    url: ENC(AUfDE+ycjKkyls5vXQy2/tWMkk3YTx5T2Ju7sQAUpWgiqknFtpJ0DQZCOMJUwINPaFgK29KB5AsGKugwg8/d/9I+yKrNXGgKmvJc3ZgL5ttdm/vxS2b6aiX3wwn5xW6aLc45mVyQKkSRE2ZEc+QmQUvnYZ1GAEWEKkbcSqBycxRcrMY8TIGkZ4oAaKf75h7+13lFQmaX5/erFoBP/DbDfRtbP9/uNWRXWoPVDrociR8=)
    username: ENC(QBB/27zo3GmIf9cgWgysvw==)
    password: ENC(m/f4lYdDAfuW9gaTSyxIltrvrKb6nKrp)
    driver-class-name: com.mysql.cj.jdbc.Driver

  jpa:
    defer-datasource-initialization: false
    hibernate:
      ddl-auto: none

  sql.init.mode: never